// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	http5 "binar/internal/app/article/category/delivery/http"
	repository4 "binar/internal/app/article/category/repository"
	service6 "binar/internal/app/article/category/service"
	http3 "binar/internal/app/conversation/delivery/http"
	"binar/internal/app/conversation/repository/conversation"
	"binar/internal/app/conversation/repository/message"
	service4 "binar/internal/app/conversation/service"
	http4 "binar/internal/app/files/delivery/http"
	repository3 "binar/internal/app/files/repository"
	service5 "binar/internal/app/files/service"
	http2 "binar/internal/app/notifications/delivery/http"
	repository2 "binar/internal/app/notifications/repository"
	service3 "binar/internal/app/notifications/service"
	service2 "binar/internal/app/queue/service"
	"binar/internal/app/users/delivery/http"
	"binar/internal/app/users/repository"
	"binar/internal/app/users/service"
	"binar/internal/infra"
	"binar/internal/infra/logger"
	"binar/internal/infra/queue"
	"binar/pkg/config"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config) (*infra.Infra, error) {
	databases, err := ProvideDatabases(cfg)
	if err != nil {
		return nil, err
	}
	connection, err := queue.NewRabbitMQConn(cfg)
	if err != nil {
		return nil, err
	}
	zapLogger, err := logger.NewZap()
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(databases, zapLogger)
	userService := service.NewUserService(userRepository, databases, zapLogger)
	notificationRepository := repository2.NewNotificationRepository(databases, zapLogger)
	queueService := service2.NewQueueService(connection, zapLogger)
	notificationService := service3.NewNotificationService(notificationRepository, userRepository, databases, queueService, zapLogger)
	conversationRepository := conversation.NewConversationRepository(databases, zapLogger)
	conversationService := service4.NewConversationService(conversationRepository, userRepository, databases, zapLogger)
	messageRepository := message.NewMessageRepository(databases, zapLogger)
	messageService := service4.NewMessageService(messageRepository, conversationRepository, userRepository, databases, zapLogger)
	fileRepository := repository3.NewFileRepository(databases, zapLogger)
	appConfig := ProvideAppConfig(cfg)
	fileService := service5.NewFileService(fileRepository, userRepository, databases, appConfig, zapLogger)
	categoryRepository := repository4.NewCategoryRepository(databases, zapLogger)
	categoryService := service6.NewCategoryService(categoryRepository, databases, zapLogger)
	infraService := ProvideService(userService, notificationService, conversationService, messageService, fileService, categoryService)
	infraRepository := ProvideRepository(userRepository, notificationRepository, conversationRepository, messageRepository, fileRepository, categoryRepository)
	userHandler := http.NewUserHandler(userService)
	notificationHandler := http2.NewNotificationHandler(notificationService)
	conversationHandler := http3.NewConversationHandler(messageService, conversationService)
	fileHandler := http4.NewFileHandler(fileService)
	categoryHandler := http5.NewCategoryHandler(categoryService)
	handler := ProvideHandler(userHandler, notificationHandler, conversationHandler, fileHandler, categoryHandler)
	infraInfra := &infra.Infra{
		Config:       cfg,
		Databases:    databases,
		RabbitMQ:     connection,
		Logger:       zapLogger,
		Service:      infraService,
		Repository:   infraRepository,
		Handler:      handler,
		QueueService: queueService,
	}
	return infraInfra, nil
}

// wire.go:

func ProvideAppConfig(cfg *config.Config) *config.AppConfig {
	return &cfg.AppConfig
}
